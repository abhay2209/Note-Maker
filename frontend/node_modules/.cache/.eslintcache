[{"/Users/abhayjolly/Note_maker/frontend/src/index.js":"1","/Users/abhayjolly/Note_maker/frontend/src/App.js":"2","/Users/abhayjolly/Note_maker/frontend/src/reportWebVitals.js":"3","/Users/abhayjolly/Note_maker/frontend/src/components/NoteCreater.js":"4","/Users/abhayjolly/Note_maker/frontend/src/components/NoteDisplay.js":"5","/Users/abhayjolly/Note_maker/frontend/src/Services/services.js":"6","/Users/abhayjolly/Note_maker/frontend/src/utils/util.js":"7"},{"size":582,"mtime":1653816026000,"results":"8","hashOfConfig":"9"},{"size":342,"mtime":1658208575363,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1653816026000,"results":"11","hashOfConfig":"9"},{"size":3172,"mtime":1658301427985,"results":"12","hashOfConfig":"9"},{"size":8323,"mtime":1658304191094,"results":"13","hashOfConfig":"9"},{"size":1601,"mtime":1658285879029,"results":"14","hashOfConfig":"9"},{"size":299,"mtime":1658306333745,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"oqza5p",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/abhayjolly/Note_maker/frontend/src/index.js",[],[],[],"/Users/abhayjolly/Note_maker/frontend/src/App.js",["43"],[],"import logo from './logo.svg';\nimport './App.css';\nimport NoteCreator from './components/NoteCreater';\nimport NoteDisplay from './components/NoteDisplay';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"app-heading\">NOTE MAKER</h1>\n      <NoteCreator/>\n      <NoteDisplay/>\n    </div>\n  );\n}\n\nexport default App;\n",[],"/Users/abhayjolly/Note_maker/frontend/src/reportWebVitals.js",[],[],"/Users/abhayjolly/Note_maker/frontend/src/components/NoteCreater.js",["44","45","46","47","48","49"],[],"\nimport React, {useState, useEffect} from 'react';\nimport { Button, Form, Alert, Container, Row, Col} from 'react-bootstrap';\nimport { addNotesAPI, getNotesAPI} from '../Services/services';\n\n\nconst formProperties = {\n    padding:'2rem',\n    width: '60rem',\n    margin: 'auto'\n    \n}\n\nconst titleProperties = {\n    width: \"20rem\",\n    padding: \"0.5rem\",\n    marginBottom: \"1rem\"\n}\n\nconst alertProperties = {\n    width: \"20rem\",\n    position: 'absolute',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    top: '15rem',\n    left: '0',\n    right: '0',\n    zIndex: '2'\n}\n\n\nconst formLabelProperties = {\n    margin: 'auto'\n}\n\nfunction NoteCreator(){\n    const [alertHidden, setAlertHidden] = useState(true);\n\n    const [note, setNote] = useState('');\n    const [title, setTitle] = useState('');\n    const [severity, setSeverity] = useState('regular')\n\n\n    const addNote= async () => {\n        if (title != \"\" && note != \"\"){\n            addNotesAPI(title, note, severity).then((response) => {response.json().then((response) => {\n                if(response.isSuccess){\n                    setAlertHidden(false);\n                    window.setTimeout(() => setAlertHidden(true), 1000);\n                    window.setTimeout(() => window.location.reload(), 500);\n                    console.log(\"Notes Added\" + response.message)\n                }\n                else{\n                    if(response.error.code='23505'){\n                        setAlertHidden(false);\n\n                    }\n                    // Pop up message of failure\n                    console.log(\"Notes failed to add\" + response.message)\n                }\n\n            })\n        })\n        return true\n    }\n    else{\n        return false\n    }\n}\n\n    \n\nreturn (\n    <div>\n    \n    <Alert show={!alertHidden} transition={true} variant=\"success\" style={alertProperties}>\n        <Alert.Heading>Note added Successfully</Alert.Heading>\n    </Alert>\n    \n    <Form style={formProperties} onSubmit={addNote} >\n    \n        \n        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n        <Container>\n        <Row>\n            <Col md={6}>\n           \n            <Form.Control onChange={(e) => setTitle(e.target.value)} as=\"textarea\" rows={1} placeholder=\"Enter Note Title\" required={true} maxLength={47}  style={titleProperties}/>\n            </Col>\n            <Col md={6}>\n            <Form.Select style={{width: \"20rem\"}} onChange={(e) => setSeverity(e.target.value)}>\n                    <option value='regular'>Regular Note</option>\n                    <option value='important'>Important Note</option>\n                    <option value='critical'>Critical Note</option>\n            </Form.Select>\n            </Col>\n        </Row>\n        <Row>\n            <Col md={12}>\n            <Form.Control onChange={(e) => setNote(e.target.value)} as=\"textarea\" rows={10} required={true} placeholder=\"Enter Note\"/>\n            </Col>\n        </Row>\n        </Container>\n        </Form.Group>\n     \n         <Button variant=\"dark\" type=\"submit\" className=\"buttonHover\">\n            Save Note\n        </Button>\n        \n    </Form>\n    \n    </div>\n    )\n}\n\nexport default NoteCreator;",[],"/Users/abhayjolly/Note_maker/frontend/src/components/NoteDisplay.js",["50"],[],"import React, {useState,useEffect} from 'react';\nimport {ListGroup, Modal, Button, Alert, Table,InputGroup, Form, Container, Row, Col} from 'react-bootstrap';\nimport { deleteNotesAPI, getNotesAPI, updateNoteAPI } from '../Services/services';\nimport { parseDate } from '../utils/util';\n\n// To set the color for my notes\nconst colorNotes = new Map([\n    [\"regular\", {backgroundColor: \"lightgreen\"}], \n    [\"important\", {backgroundColor: \"#FBF581\"}],\n    [\"critical\", {backgroundColor: \"#FB836C\"}]]);\n\nconst modal_prop = {\n    minWidth: '50rem',\n    position: 'absolute', \n}\n\nconst listProperties = {\n    width: '30rem',\n    textAlign: 'left',\n    marginLeft: '5%',\n    paddingBottom: \"4rem\",\n}\n\nconst alertProperties = {\n    width: \"20rem\",\n    position: 'absolute',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    left: '0',\n    right: '0',\n    zIndex: '2'\n\n}\n\n\nfunction NoteDisplay(){\n\n    const [notes, setNotes] = useState([]);\n\n    const [alertHidden, setAlertHidden] = useState(true);\n\n    const [modalHidden, setModalHidden] = useState(true);      // Handle to show or not show modal\n    const [editModal, setEditModal] = useState(true)\n\n    const [noteId, setNoteId] = useState();                    // Unieue id of note\n    const [selNoteTitle, setNoteTitle] = useState();           // set title for the list element selected\n    const [selNote, setNote] = useState();                     // set not info got list elelemnt selected\n    const [noteSeverity, setNoteSeverity] = useState();        // how severe is the note\n    const [time, setTime] = useState();\n\n    const getNoteList = async () => {\n        getNotesAPI().then((response) => {response.json().then((response) => {\n            if (response.isSuccess) {\n                setNotes(response.res)\n                // console.log(\"The budget logs are\" + response.res)\n            }\n            else{ \n                console.log(\"Error in getting Budget Categoroes\" + response.error)\n            }\n        })\n    })\n    }\n\n    const updateNote = async () => {\n        console.log(noteId ,selNoteTitle + selNote + noteSeverity)\n        updateNoteAPI(noteId, selNoteTitle, selNote, noteSeverity).then((response) => {response.json().then((response) => {\n                if (response.isSuccess) {\n                    getNoteList();\n                }\n                else{\n                    console.log(\"Error updating notes\" + response.error)\n                }\n            })\n        })\n        handleClose()\n    }\n    \n\n    useEffect(() => {\n        getNoteList()\n    }, [])\n    \n    // Show modal when list is clicked\n    function showNote(note){\n        // Change modal info if different list element is clicked \n        // var note_info = JSON.parse(localStorage.getItem(note))\n\n        setModalHidden(false);\n\n        setNoteId(note.id);\n        setNoteTitle(note.title);\n        setNote(note.notebody);\n        setNoteSeverity(note.noteimportance);\n        setTime(parseDate(note.modify))\n\n    }\n\n    // // Close the modal by changing hide state\n    function handleClose(){\n        setModalHidden(true);\n        setEditModal(true);\n    }\n\n    // // Delete note when delete button is clicked \n    function deleteNote(){\n        deleteNotesAPI(noteId).then((response) => {\n            response.json().then((response) => {\n                if (response.isSuccess) {\n                    setAlertHidden(false);\n                    window.setTimeout(() => setAlertHidden(true), 1000);\n\n                    handleClose();     // Close modal\n                    getNoteList();     // Update List\n                    \n                }\n                else{\n                    console.log(\"Failed with error\" + response.error)\n                }\n            })\n        })\n        \n    }\n\n    function handleEdit(){\n        setModalHidden(true)\n        setEditModal(false)\n    }\n\n    return (<div className='d-inline'>\n        \n        <Alert show={!alertHidden} transition={true} variant=\"danger\" style={alertProperties}>\n            <Alert.Heading>Note Deleted Successfully</Alert.Heading>\n        </Alert>\n        \n        \n            <Modal  show={!modalHidden} onHide={handleClose}>\n            <Modal.Dialog backdrop={'static'} className='align-middle modal-show' style={modal_prop}>\n                <Modal.Header style={colorNotes.get(noteSeverity)} closeButton onHide={handleClose} >\n                    <Modal.Title style={{marginLeft:\"1rem\"}}>\n                    <Row>{selNoteTitle}</Row>\n                    <Row className=\"fst-normal fs-6 \">Last modified : {time}</Row></Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body style={colorNotes.get(noteSeverity)}>\n                    <p className=\"note-text\">{selNote}</p>\n                </Modal.Body>\n\n                <Modal.Footer style={colorNotes.get(noteSeverity)}>\n                        <Button variant=\"primary\" onClick={handleEdit}>Edit Note</Button>\n                        <Button variant=\"danger\" onClick={deleteNote}>Delete Note</Button>\n                </Modal.Footer>\n\n            </Modal.Dialog>\n            </Modal>\n\n            <Modal show={!editModal} onHide={handleClose}>\n            <Modal.Dialog backdrop={'static'} className='align-middle modal-show' style={modal_prop}>\n                <Modal.Header closeButton onHide={handleClose} >\n                    <Modal.Title>\n                        <Container>\n                                 <Row>\n                                <Col md={6}>\n                                <InputGroup className=\"mb-3\">\n                                            <Form.Control\n                                                        onChange={(e)=>{setNoteTitle(e.target.value)}}\n                                                        placeholder=\"Enter notes title\"\n                                                        aria-label=\"Note title\"\n                                                        aria-describedby=\"basic-addon2\"\n                                                        value={selNoteTitle}\n                                            />\n                                </InputGroup>\n                                </Col>\n                                <Col md={6}>\n                                        <Form.Select \n                                                    onChange={(e) => setNoteSeverity(e.target.value)}\n                                                    defaultValue={noteSeverity}>\n                                                    <option value='regular'>Regular Note</option>\n                                                    <option value='important'>Important Note</option>\n                                                    <option value='critical'>Critical Note</option>\n                                        </Form.Select>\n                                 </Col>\n                                </Row>\n                            </Container>\n                    </Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n                                    <Form.Control\n                                                onChange={(e)=>{setNote(e.target.value)}}\n                                                rows={10}\n                                                as=\"textarea\"\n                                                placeholder=\"Enter your notes\"\n                                                aria-label=\"note body\"\n                                                aria-describedby=\"basic-addon2\"\n                                                value={selNote}\n                                    />\n                                 \n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={updateNote}>Update</Button>\n                </Modal.Footer>\n\n            </Modal.Dialog>\n            </Modal>\n                 \n\n        <div>\n        <h3 className=\"note-heading\">Saved Notes:</h3>\n       \n        <ListGroup style={listProperties}>\n                {notes && notes.map(note => \n                        <ListGroup.Item style={colorNotes.get(note.noteimportance)} key={note.title} action onClick={()=>showNote(note)}>{note.title}</ListGroup.Item>  \n                    )}\n        </ListGroup> \n\n        </div>\n\n        </div>\n    )\n}\n\n\nexport default NoteDisplay;","/Users/abhayjolly/Note_maker/frontend/src/Services/services.js",[],[],"/Users/abhayjolly/Note_maker/frontend/src/utils/util.js",[],[],{"ruleId":"51","severity":1,"message":"52","line":1,"column":8,"nodeType":"53","messageId":"54","endLine":1,"endColumn":12},{"ruleId":"51","severity":1,"message":"55","line":2,"column":26,"nodeType":"53","messageId":"54","endLine":2,"endColumn":35},{"ruleId":"51","severity":1,"message":"56","line":4,"column":23,"nodeType":"53","messageId":"54","endLine":4,"endColumn":34},{"ruleId":"51","severity":1,"message":"57","line":32,"column":7,"nodeType":"53","messageId":"54","endLine":32,"endColumn":26},{"ruleId":"58","severity":1,"message":"59","line":45,"column":19,"nodeType":"60","messageId":"61","endLine":45,"endColumn":21},{"ruleId":"58","severity":1,"message":"59","line":45,"column":33,"nodeType":"60","messageId":"61","endLine":45,"endColumn":35},{"ruleId":"62","severity":1,"message":"63","line":54,"column":24,"nodeType":"64","messageId":"65","endLine":54,"endColumn":51},{"ruleId":"51","severity":1,"message":"66","line":2,"column":42,"nodeType":"53","messageId":"54","endLine":2,"endColumn":47},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'getNotesAPI' is defined but never used.","'formLabelProperties' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'Table' is defined but never used."]