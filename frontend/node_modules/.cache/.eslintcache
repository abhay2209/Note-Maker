[{"/Users/abhayjolly/Note_maker/frontend/src/index.js":"1","/Users/abhayjolly/Note_maker/frontend/src/App.js":"2","/Users/abhayjolly/Note_maker/frontend/src/reportWebVitals.js":"3","/Users/abhayjolly/Note_maker/frontend/src/components/NoteCreater.js":"4","/Users/abhayjolly/Note_maker/frontend/src/components/NoteDisplay.js":"5","/Users/abhayjolly/Note_maker/frontend/src/Services/services.js":"6"},{"size":582,"mtime":1653816026000,"results":"7","hashOfConfig":"8"},{"size":342,"mtime":1658208575363,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1653816026000,"results":"10","hashOfConfig":"8"},{"size":3372,"mtime":1658271843809,"results":"11","hashOfConfig":"8"},{"size":8283,"mtime":1658280722818,"results":"12","hashOfConfig":"8"},{"size":1109,"mtime":1658211156422,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"oqza5p",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/Users/abhayjolly/Note_maker/frontend/src/index.js",[],[],[],"/Users/abhayjolly/Note_maker/frontend/src/App.js",["39"],[],"import logo from './logo.svg';\nimport './App.css';\nimport NoteCreator from './components/NoteCreater';\nimport NoteDisplay from './components/NoteDisplay';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 className=\"app-heading\">NOTE MAKER</h1>\n      <NoteCreator/>\n      <NoteDisplay/>\n    </div>\n  );\n}\n\nexport default App;\n",[],"/Users/abhayjolly/Note_maker/frontend/src/reportWebVitals.js",[],[],"/Users/abhayjolly/Note_maker/frontend/src/components/NoteCreater.js",["40","41","42","43"],[],"\nimport React, {useState, useEffect} from 'react';\nimport { Button, Form, Alert} from 'react-bootstrap';\nimport { addNotesAPI,getNotesAPI } from '../Services/services';\nimport NoteDisplay from './NoteDisplay';\n\nconst formProperties = {\n    padding:'2rem',\n    width: '60rem',\n    margin: 'auto'\n    \n}\n\nconst titleProperties = {\n    width: \"30rem\",\n    padding: \"0.5rem\",\n    marginBottom: \"1rem\"\n}\n\nconst alertProperties = {\n    width: \"20rem\",\n    position: 'absolute',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    top: '15rem',\n    left: '0',\n    right: '0',\n    zIndex: '2'\n}\n\n\nconst formLabelProperties = {\n    textAlign: 'left'\n}\n\nfunction NoteCreator(){\n    const [alertHidden, setAlertHidden] = useState(true);\n\n    const [note, setNote] = useState('');\n    const [title, setTitle] = useState('');\n    const [severity, setSeverity] = useState('regular')\n\n    // function handleNoteSave(){\n    //     if(title !== \"\" && note !== \"\"){\n    //         localStorage.setItem(title, JSON.stringify(note));   // Add note with the key\n            \n    //         setTitle(\"\");                                        // Setting title and Note back to default null after adding note\n    //         setNote(\"\");\n\n    //         // Hide alert after storing\n    //         setAlertHidden(false);\n    //         window.setTimeout(() => setAlertHidden(true), 1000);\n    //     }\n    // }     \n\n    const addNote= async () => {\n        addNotesAPI(title, note, severity).then((response) => {response.json().then((response) => {\n            if(response.isSuccess){\n                setAlertHidden(false);\n                window.setTimeout(() => setAlertHidden(true), 1000);\n                console.log(\"Notes Added\" + response.message)\n            }\n            else{\n                if(response.error.code='23505'){\n                    setAlertHidden(false);\n\n                }\n                // Pop up message of failure\n                console.log(\"Notes failed to add\" + response.message)\n            }\n\n        })\n    })\n}\n\n    \n\nreturn (\n    <div>\n    \n    <Alert show={!alertHidden} transition={true} variant=\"success\" style={alertProperties}>\n        <Alert.Heading>Note added Successfully</Alert.Heading>\n    </Alert>\n    \n    <Form style={formProperties} >\n        \n        <Form.Group className=\"mb-3 d-flex flex-column\" controlId=\"exampleForm.ControlTextarea1\">\n            <Form.Label style={formLabelProperties}><b>Enter Note to Save</b></Form.Label>\n            <Form.Control onChange={(e) => setTitle(e.target.value)} as=\"textarea\" rows={1} placeholder=\"Enter Note Title\" required=\"true\" maxLength={47}  style={titleProperties}/>\n            <Form.Label style={formLabelProperties}><b>Note Severity</b></Form.Label>\n            <Form.Select onChange={(e) => setSeverity(e.target.value)}>\n                    <option value='regular'>Regular</option>\n                    <option value='intermediate'>Intermediate</option>\n                    <option value='critical'>Critical</option>\n            </Form.Select>\n            <Form.Control onChange={(e) => setNote(e.target.value)} as=\"textarea\" rows={10} placeholder=\"Enter Note\" required=\"true\"/>\n        </Form.Group>\n\n         <Button onClick = {addNote} variant=\"dark\" type=\"submit\" className=\"buttonHover\">\n            Save Note\n        </Button>\n    </Form>\n    </div>\n    )\n}\n\nexport default NoteCreator;",[],"/Users/abhayjolly/Note_maker/frontend/src/components/NoteDisplay.js",["44","45","46"],[],"import React, {useState,useEffect} from 'react';\nimport {ListGroup, Modal, Button, Alert, Table,InputGroup, Form, Container, Row, Col} from 'react-bootstrap';\nimport { deleteNotesAPI, getNotesAPI } from '../Services/services';\n\nconst modal_prop = {\n    minWidth: '40rem',\n    position: 'absolute',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    paddingBottom: '2rem',\n    left: '0',\n    right: '0',\n    zIndex: '2'\n}\n\nconst listProperties = {\n    width: '30rem',\n    textAlign: 'left',\n    marginLeft: '5%',\n    paddingBottom: \"4rem\",\n}\n\nconst listPropertiesDisable = {\n    width: '30rem',\n    textAlign: 'left',\n    marginLeft: '5%',\n    paddingBottom: \"4rem\",\n    opacity: '0.8'\n}\n\nconst alertProperties = {\n    width: \"20rem\",\n    position: 'absolute',\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    left: '0',\n    right: '0',\n    zIndex: '2'\n\n}\n\nconst tableProperties ={\n    width: \"40rem\",\n    backgroundColor: \"white\",\n    marginLeft: '5%',\n    \n}\n\nfunction NoteDisplay(){\n\n    const [notes, setNotes] = useState([]);\n\n    const [alertHidden, setAlertHidden] = useState(true);\n\n    const [modalHidden, setModalHidden] = useState(true);      // Handle to show or not show modal\n    const [editModal, setEditModal] = useState(true)\n\n    const [selNoteTitle, setNoteTitle] = useState();           // set title for the list element selected\n    const [selNote, setNote] = useState();                     // set not info got list elelemnt selected\n    const [noteSeverity, setNoteSeverity] = useState();        // how severe is the note\n\n\n\n    const getNoteList = async () => {\n        getNotesAPI().then((response) => {response.json().then((response) => {\n            if (response.isSuccess) {\n                setNotes(response.res)\n                // console.log(\"The budget logs are\" + response.res)\n            }\n            else{ \n                console.log(\"Error in getting Budget Categoroes\" + response.error)\n            }\n        })\n    })\n    }\n\n    useEffect(() => {\n        getNoteList()\n    }, [])\n    \n    // Show modal when list is clicked\n    function showNote(note){\n        // Change modal info if different list element is clicked \n        // var note_info = JSON.parse(localStorage.getItem(note))\n\n        setModalHidden(false);\n\n        setNoteTitle(note.title);\n        setNote(note.notebody);\n        setNoteSeverity(note.noteimportance);\n    }\n\n    // // Close the modal by changing hide state\n    function handleClose(){\n\n        setModalHidden(true);\n        setEditModal(true);\n    }\n\n    \n\n    // // Delete note when delete button is clicked \n    function deleteNote(){\n        deleteNotesAPI(selNoteTitle).then((response) => {\n            response.json().then((response) => {\n                if (response.isSuccess) {\n                    setAlertHidden(false);\n                    window.setTimeout(() => setAlertHidden(true), 1000);\n\n                    handleClose();\n\n                    getNoteList();\n                    \n                }\n                else{\n                    console.log(\"Failed with error\" + response.error)\n                }\n            })\n        })\n        \n    }\n\n    function handleEdit(){\n        setModalHidden(true)\n        setEditModal(false)\n        \n    }\n\n    function updateNote(){\n\n    }\n\n    return (<div className='d-inline'>\n        \n        <Alert show={!alertHidden} transition={true} variant=\"danger\" style={alertProperties}>\n            <Alert.Heading>Note Deleted Successfully</Alert.Heading>\n        </Alert>\n        \n        \n            <Modal show={!modalHidden}>\n            <Modal.Dialog backdrop={'static'} className='align-middle modal-show' style={modal_prop}>\n                <Modal.Header closeButton onHide={handleClose} >\n                    <Modal.Title>{selNoteTitle}</Modal.Title>\n                    <p className=\"float-left\">{noteSeverity}</p>\n                </Modal.Header>\n\n                <Modal.Body>\n                    <p className=\"note-text\">{selNote}</p>\n                </Modal.Body>\n\n                <Modal.Footer>\n                    \n                    <Button variant=\"primary\" onClick={handleEdit}>Edit Note</Button>\n                    <Button variant=\"danger\" onClick={deleteNote}>Delete Note</Button>\n                </Modal.Footer>\n\n            </Modal.Dialog>\n            </Modal>\n\n            <Modal show={!editModal}>\n            <Modal.Dialog backdrop={'static'} className='align-middle modal-show' style={modal_prop}>\n                <Modal.Header closeButton onHide={handleClose} >\n                    <Modal.Title>\n                        <Container>\n                                 <Row>\n                                <Col md={6}>\n                                <InputGroup className=\"mb-3\">\n                                            <Form.Control\n                                                        onChange={(e)=>{setNoteTitle(e.target.value)}}\n                                                        placeholder=\"Enter notes title\"\n                                                        aria-label=\"Note title\"\n                                                        aria-describedby=\"basic-addon2\"\n                                                        value={selNoteTitle}\n                                            />\n                                </InputGroup>\n                                </Col>\n                                <Col md={6}>\n                                        <Form.Select \n                                                    onChange={(e) => setNoteSeverity(e.target.value)}\n                                                    defaultValue={noteSeverity}>\n                                                    <option value='regular'>Regular</option>\n                                                    <option value='intermediate'>Intermediate</option>\n                                                    <option value='critical'>Critical</option>\n                                        </Form.Select>\n                                 </Col>\n                                </Row>\n                            </Container>\n                    </Modal.Title>\n                </Modal.Header>\n\n                <Modal.Body>\n               \n                                    <Form.Control\n                                                onChange={(e)=>{setNote(e.target.value)}}\n                                                rows={10}\n                                                as=\"textarea\"\n                                                placeholder=\"Enter your notes\"\n                                                aria-label=\"note body\"\n                                                aria-describedby=\"basic-addon2\"\n                                                value={selNote}\n                                    />\n                                 \n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={updateNote}>Update</Button>\n                </Modal.Footer>\n\n            </Modal.Dialog>\n            </Modal>\n                 \n\n        <div>\n        <h3 className=\"note-heading\">Saved Notes:</h3>\n       \n        <ListGroup style={listProperties}>\n                {notes && notes.map(note => \n                        <ListGroup.Item  key={note.title} action onClick={()=>showNote(note)}>{note.title}</ListGroup.Item>\n                        \n                    )}\n        </ListGroup> \n\n{/* \n        <Table style={tableProperties} striped bordered hover size=\"sm\">\n                <thead>\n                    <tr>\n                    <th>Note Title</th>\n                    <th>Actions</th>\n                    </tr>\n                </thead>\n            \n                    <tbody>\n                 {notes && notes.map(note => \n                        \n                        <tr key={note.title}><th  key={note.title} onClick={()=>showNote(note)}>{note.title}</th>\n                        <th><Button key={note.title} onClick={()=>{handleEdit(note)}}>Edit</Button> <Button onClick={(e)=>{console.log(e.target.value)}}>Delete</Button></th></tr>\n                        \n                    )}\n                    </tbody>\n        </Table> */}\n        </div>\n\n        </div>\n    )\n}\n\n\nexport default NoteDisplay;","/Users/abhayjolly/Note_maker/frontend/src/Services/services.js",[],[],[],{"ruleId":"47","severity":1,"message":"48","line":1,"column":8,"nodeType":"49","messageId":"50","endLine":1,"endColumn":12},{"ruleId":"47","severity":1,"message":"51","line":2,"column":26,"nodeType":"49","messageId":"50","endLine":2,"endColumn":35},{"ruleId":"47","severity":1,"message":"52","line":4,"column":22,"nodeType":"49","messageId":"50","endLine":4,"endColumn":33},{"ruleId":"47","severity":1,"message":"53","line":5,"column":8,"nodeType":"49","messageId":"50","endLine":5,"endColumn":19},{"ruleId":"54","severity":1,"message":"55","line":64,"column":20,"nodeType":"56","messageId":"57","endLine":64,"endColumn":47},{"ruleId":"47","severity":1,"message":"58","line":2,"column":42,"nodeType":"49","messageId":"50","endLine":2,"endColumn":47},{"ruleId":"47","severity":1,"message":"59","line":23,"column":7,"nodeType":"49","messageId":"50","endLine":23,"endColumn":28},{"ruleId":"47","severity":1,"message":"60","line":42,"column":7,"nodeType":"49","messageId":"50","endLine":42,"endColumn":22},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'getNotesAPI' is defined but never used.","'NoteDisplay' is defined but never used.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'Table' is defined but never used.","'listPropertiesDisable' is assigned a value but never used.","'tableProperties' is assigned a value but never used."]